"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[6693],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,d=u["".concat(c,".").concat(m)]||u[m]||g[m]||s;return n?r.createElement(d,a(a({ref:t},l),{},{components:n})):r.createElement(d,a({ref:t},l))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5628:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const s={sidebar_position:2},a="Integration tests",i={unversionedId:"test-report/integration-testing-report",id:"test-report/integration-testing-report",title:"Integration tests",description:"Jest is used alongside React to mock objects",source:"@site/docs/test-report/integration-testing-report.md",sourceDirName:"test-report",slug:"/test-report/integration-testing-report",permalink:"/project-optimap/docs/test-report/integration-testing-report",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-optimap/edit/main/documentation/docs/test-report/integration-testing-report.md",tags:[],version:"current",lastUpdatedBy:"Benjamin Rittenhouse",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Unit tests",permalink:"/project-optimap/docs/test-report/unit-testing-report"},next:{title:"Acceptance Test",permalink:"/project-optimap/docs/test-report/acceptence-testing-report"}},c={},p=[{value:"Login.js",id:"loginjs",level:3},{value:"Login.js test results",id:"loginjs-test-results",level:4},{value:"Signup.js",id:"signupjs",level:3},{value:"Signup.js test results",id:"signupjs-test-results",level:4}],l={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"integration-tests"},"Integration tests"),(0,o.kt)("p",null,"Jest is used alongside React to mock objects"),(0,o.kt)("h3",{id:"loginjs"},"Login.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"// Verify if successful login displays navbar options\n  it('should display navbar options after successful login', async () => {\n    const mockUser = {\n      uid: '1234',\n      displayName: 'testuser',\n      email: 'te@email.com'\n    };\n    const mockOnAuthStateChanged = jest.fn((callback) => {\n      callback(mockUser);\n    });\n    jest.spyOn(auth, 'onAuthStateChanged').mockImplementation(mockOnAuthStateChanged);\n\n    render( <MemoryRouter><Login /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    const passwordInput = screen.getByLabelText('Password');\n    const loginButton = screen.getByTestId('login button');\n\n    fireEvent.change(emailInput, { target: { value: 'te@email.com' } });\n    fireEvent.change(passwordInput, { target: { value: 'test123' } });\n    fireEvent.click(loginButton);\n\n    await waitFor(() => {\n      expect(screen.getByText('Logout')).toBeInTheDocument();\n      expect(screen.getByText('Profile')).toBeInTheDocument();\n      expect(screen.getByText('Map')).toBeInTheDocument();\n      expect(screen.getByText('Directions')).toBeInTheDocument();\n      expect(screen.getByText('Create Route')).toBeInTheDocument();\n      expect(screen.getByText('Saved Routes')).toBeInTheDocument();\n    });\n  });\n")),(0,o.kt)("h4",{id:"loginjs-test-results"},"Login.js test results"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://media.discordapp.net/attachments/1059991342266204242/1100474068194574447/image.png",alt:null}),"\n",(0,o.kt)("img",{parentName:"p",src:"https://media.discordapp.net/attachments/1059991342266204242/1100474068408467587/image.png",alt:null})),(0,o.kt)("h3",{id:"signupjs"},"Signup.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"// Verify if navbar options are displayed after successful signup\n  it('should display navbar options after successful signup', async () => {\n    const mockUser = {\n      uid: '1234',\n      displayName: 'testuser',\n      email: 'tea@email.com'\n    };\n    const mockOnAuthStateChanged = jest.fn((callback) => {\n      callback(mockUser);\n    });\n    jest.spyOn(auth, 'onAuthStateChanged').mockImplementation(mockOnAuthStateChanged);\n\n    render( <MemoryRouter><Signup /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    const passwordInput = screen.getByLabelText('Password');\n    const confirmInput = screen.getByLabelText('Confirm Password');\n    const signupButton = screen.getByTestId('signup button');\n\n    fireEvent.change(emailInput, { target: { value: 'tea@email.com' } });\n    fireEvent.change(passwordInput, { target: { value: 'test123' } });\n    fireEvent.change(confirmInput, { target: { value: 'test123' } });\n    fireEvent.click(signupButton);\n\n    await waitFor(() => {\n      expect(screen.getByText('Logout')).toBeInTheDocument();\n      expect(screen.getByText('Profile')).toBeInTheDocument();\n      expect(screen.getByText('Map')).toBeInTheDocument();\n      expect(screen.getByText('Directions')).toBeInTheDocument();\n      expect(screen.getByText('Create Route')).toBeInTheDocument();\n      expect(screen.getByText('Saved Routes')).toBeInTheDocument();\n    });\n  });\n")),(0,o.kt)("h4",{id:"signupjs-test-results"},"Signup.js test results"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://media.discordapp.net/attachments/1059991342266204242/1100474068660129953/image.png",alt:null}),"\n",(0,o.kt)("img",{parentName:"p",src:"https://media.discordapp.net/attachments/1059991342266204242/1100474068928577686/image.png",alt:null})))}u.isMDXComponent=!0}}]);