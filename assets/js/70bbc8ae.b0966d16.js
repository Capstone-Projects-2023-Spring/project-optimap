"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[9217],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var s=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,s,o=function(e,n){if(null==e)return{};var t,s,o={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=s.createContext({}),u=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return s.createElement(l.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},m=s.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return t?s.createElement(g,a(a({ref:n},c),{},{components:t})):s.createElement(g,a({ref:n},c))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<r;u++)a[u]=t[u];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6947:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var s=t(7462),o=(t(7294),t(3905));const r={sidebar_position:1},a="Unit tests",i={unversionedId:"test-report/unit-testing-report",id:"test-report/unit-testing-report",title:"Unit tests",description:"Unit tests will be written using the Jest framework to test our React js application",source:"@site/docs/test-report/unit-testing-report.md",sourceDirName:"test-report",slug:"/test-report/unit-testing-report",permalink:"/project-optimap/docs/test-report/unit-testing-report",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-optimap/edit/main/documentation/docs/test-report/unit-testing-report.md",tags:[],version:"current",lastUpdatedBy:"AlexHarvey63",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Test Report",permalink:"/project-optimap/docs/category/test-report"},next:{title:"Integration tests",permalink:"/project-optimap/docs/test-report/integration-testing-report"}},l={},u=[{value:"Front-end",id:"front-end",level:2},{value:"Back-end",id:"back-end",level:2}],c={toc:u};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,s.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"unit-tests"},"Unit tests"),(0,o.kt)("p",null,"Unit tests will be written using the Jest framework to test our React js application"),(0,o.kt)("h2",{id:"front-end"},"Front-end"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("b",null,"index.js"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"testRenderSite() \n    - Test: Verify site renders  \n    - Result: Pass if site renders successfully correctly\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("b",null,"App.js"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"testFireBaseTokenGeneration()\n    - Test: Verify Firebase Authentication generate token\n    - Result: Pass if user token is generated successfully\n\ntestRoutes() \n    - Test: Verify routing to different screen \n    - Result: Pass if routing to different screen correctly \n\ntestSignupImport()\n    - Test: Verify Sign up component imports \n    - Result: Pass if Sign up component is found successfully\n\ntestLoginImport()\n    - Test: Verify Sign up component imports \n    - Result: Pass if Login component is found successfully\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("b",null,"Login.js"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"// Test If Login Form Renders\n  it('should render the Login form', () => {\n    render(<MemoryRouter><Login /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    const passwordInput = screen.getByLabelText('Password');\n    const loginButton = screen.getByTestId('login button');\n    expect(emailInput).toBeInTheDocument();\n    expect(passwordInput).toBeInTheDocument();\n    expect(loginButton).toBeInTheDocument();\n  });\n\n// Test If Email Field Renders\nit('should display Email Field', () => {\n    render(<MemoryRouter><Login /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    expect(emailInput).toBeInTheDocument();\n    });\n\n// Test If Password Field Renders\nit('should display Password Field', () => {\n    render(<MemoryRouter><Login /></MemoryRouter>);\n    const passwordInput = screen.getByLabelText('Password');\n    expect(passwordInput).toBeInTheDocument();\n    });\n\n// Test if Login Button Renders\nit('should display Login Button', () => {\n    render(<MemoryRouter><Login /></MemoryRouter>);\n    const loginButton = screen.getByTestId('login button');\n    expect(loginButton).toBeInTheDocument();\n    });\n\n// Verify Email handler function responds to a change of event in the email field\nit('should respond to a change of event in the email field', () => {\n    render(<MemoryRouter><Login /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    fireEvent.change(emailInput, { target: { value: ' ' } });\n    expect(emailInput.value).toBe('');\n    });\n\n// Verify Password handler function responds to a change of event in the password field\nit('should respond to a change of event in the password field', () => {\n    render(<MemoryRouter><Login /></MemoryRouter>);\n    const passwordInput = screen.getByLabelText('Password');\n    fireEvent.change(passwordInput, { target: { value: ' ' } });\n    expect(passwordInput.value).toBe(' ');\n    });\n\n// Verify handler function responds to a change of event on form submission\nit('should respond to a change of event on form submission', () => {\n    render(<MemoryRouter><Login /></MemoryRouter>);\n    const loginButton = screen.getByTestId('login button');\n    fireEvent.click(loginButton);\n    expect(loginButton).toBeInTheDocument();\n    });\n// Verify if null entry displays an error\nit('should display an error message if login fails with null entry', async () => {\n    const mockSignInWithEmailAndPassword = jest.fn(() => {\n        throw new Error('auth/invalid-email');\n    });\n    jest.mock('../firebase/Firebase', () => ({\n        signInWithEmailAndPassword: mockSignInWithEmailAndPassword,\n    }));\n\n    render(<MemoryRouter><Login /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    const passwordInput = screen.getByLabelText('Password');\n    const loginButton = screen.getByTestId('login button');\n\n    fireEvent.change(emailInput, { target: { value: ' ' } });\n    fireEvent.change(passwordInput, { target: { value: ' ' } });\n    fireEvent.click(loginButton);\n\n    const errorMessage = await screen.findByText('Firebase: Error (auth/invalid-email).');\n    expect(errorMessage).toBeInTheDocument();\n    });\n\n// Verify if invalid password displays an error\n  it('should display an error message if login fails with password', async () => {\n    const mockSignInWithEmailAndPassword = jest.fn(() => {\n      throw new Error('auth/wrong-password');\n    });\n    jest.mock('../firebase/Firebase', () => ({\n      signInWithEmailAndPassword: mockSignInWithEmailAndPassword,\n    }));\n\n    render( <MemoryRouter><Login /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    const passwordInput = screen.getByLabelText('Password');\n    const loginButton = screen.getByTestId('login button');\n\n    fireEvent.change(emailInput, { target: { value: 'a@a.com' } });\n    fireEvent.change(passwordInput, { target: { value: 'te1vwsed23' } }); // wrong password\n    fireEvent.click(loginButton);\n\n    const errorMessage = await screen.findByText('Incorrect password. Please try again.');\n    expect(errorMessage).toBeInTheDocument();\n  });\n\n// Verify if invalid email displays an error\n  it('should display an error message if login fails with email', async () => {\n    const mockSignInWithEmailAndPassword = jest.fn(() => {\n      throw new Error('auth/wrong-email');\n    });\n    jest.mock('../firebase/Firebase', () => ({\n      signInWithEmailAndPassword: mockSignInWithEmailAndPassword,\n    }));\n\n    render( <MemoryRouter><Login /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    const passwordInput = screen.getByLabelText('Password');\n    const loginButton = screen.getByTestId('login button');\n\n    fireEvent.change(emailInput, { target: { value: 'test@twefwewst.com' } }); // Wrong email\n    fireEvent.change(passwordInput, { target: { value: 'test123' } });\n    fireEvent.click(loginButton);\n\n    const errorMessage = await screen.findByText('Email does not exist. Please try again');\n    expect(errorMessage).toBeInTheDocument();\n  });\n\n// Verify if successful login displays navbar options\n  it('should display navbar options after successful login', async () => {\n    const mockUser = {\n      uid: '1234',\n      displayName: 'testuser',\n      email: 'te@email.com'\n    };\n    const mockOnAuthStateChanged = jest.fn((callback) => {\n      callback(mockUser);\n    });\n    jest.spyOn(auth, 'onAuthStateChanged').mockImplementation(mockOnAuthStateChanged);\n\n    render( <MemoryRouter><Login /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    const passwordInput = screen.getByLabelText('Password');\n    const loginButton = screen.getByTestId('login button');\n\n    fireEvent.change(emailInput, { target: { value: 'te@email.com' } });\n    fireEvent.change(passwordInput, { target: { value: 'test123' } });\n    fireEvent.click(loginButton);\n\n    await waitFor(() => {\n      expect(screen.getByText('Logout')).toBeInTheDocument();\n      expect(screen.getByText('Profile')).toBeInTheDocument();\n      expect(screen.getByText('Map')).toBeInTheDocument();\n      expect(screen.getByText('Directions')).toBeInTheDocument();\n      expect(screen.getByText('Create Route')).toBeInTheDocument();\n      expect(screen.getByText('Saved Routes')).toBeInTheDocument();\n    });\n  });\n\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("b",null,"Login.js Test Results"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'<testsuite name="Login" errors="0" failures="0" skipped="0" timestamp="2023-04-22T21:22:51" time="2.902" tests="11">\n    <testcase classname="Login should render the Login form" name="Login should render the Login form" time="0.125">\n    </testcase>\n    <testcase classname="Login should display Email Field" name="Login should display Email Field" time="0.016">\n    </testcase>\n    <testcase classname="Login should display Password Field" name="Login should display Password Field" time="0.012">\n    </testcase>\n    <testcase classname="Login should display Login Button" name="Login should display Login Button" time="0.012">\n    </testcase>\n    <testcase classname="Login should respond to a change of event in the email field" name="Login should respond to a change of event in the email field" time="0.019">\n    </testcase>\n    <testcase classname="Login should respond to a change of event in the password field" name="Login should respond to a change of event in the password field" time="0.015">\n    </testcase>\n    <testcase classname="Login should respond to a change of event on form submission" name="Login should respond to a change of event on form submission" time="0.074">\n    </testcase>\n    <testcase classname="Login should display an error message if login fails with null entry" name="Login should display an error message if login fails with null entry" time="0.205">\n    </testcase>\n    <testcase classname="Login should display an error message if login fails with password" name="Login should display an error message if login fails with password" time="0.238">\n    </testcase>\n    <testcase classname="Login should display an error message if login fails with email" name="Login should display an error message if login fails with email" time="0.2">\n    </testcase>\n    <testcase classname="Login should display navbar options after successful login" name="Login should display navbar options after successful login" time="0.035">\n    </testcase>\n  </testsuite>\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("b",null,"Signup.js"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"//Verify that the signup for renders\n  it('should render the Signup form', () => {\n    render(<MemoryRouter><Signup /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    const passwordInput = screen.getByLabelText('Password');\n    const confirmInput = screen.getByLabelText('Confirm Password');\n    const signupButton = screen.getByTestId('signup button');\n    expect(emailInput).toBeInTheDocument();\n    expect(passwordInput).toBeInTheDocument();\n    expect(confirmInput).toBeInTheDocument();\n    expect(signupButton).toBeInTheDocument();\n  });\n\n// Test If Email Field Renders\nit('should display Email Field', () => {\n    render(<MemoryRouter><Signup /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    expect(emailInput).toBeInTheDocument();\n    });\n\n// Test If Password Field Renders\nit('should display Password Field', () => {\n    render(<MemoryRouter><Signup /></MemoryRouter>);\n    const passwordInput = screen.getByLabelText('Password');\n    expect(passwordInput).toBeInTheDocument();\n    });\n\n// Test If Confirm Password Field Renders\nit('should display Confirm Password Field', () => {\n    render(<MemoryRouter><Signup /></MemoryRouter>);\n    const confirmInput = screen.getByLabelText('Confirm Password');\n    expect(confirmInput).toBeInTheDocument();\n    });\n\n// Test if Signup Button Renders\nit('should display Signup Button', () => {\n    render(<MemoryRouter><Signup /></MemoryRouter>);\n    const signupButton = screen.getByTestId('signup button');\n    expect(signupButton).toBeInTheDocument();\n    });\n\n// Verify Email handler function responds to a change of event in the email field\nit('should respond to a change of event in the email field', () => {\n    render(<MemoryRouter><Signup /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    fireEvent.change(emailInput, { target: { value: ' ' } });\n    expect(emailInput.value).toBe('');\n    });\n\n// Verify Password handler function responds to a change of event in the password field\nit('should respond to a change of event in the password field', () => {\n    render(<MemoryRouter><Signup /></MemoryRouter>);\n    const passwordInput = screen.getByLabelText('Password');\n    fireEvent.change(passwordInput, { target: { value: ' ' } });\n    expect(passwordInput.value).toBe(' ');\n    });\n\n// Verify Confirm Password handler function responds to a change of event in the confirm password field\nit('should respond to a change of event in the confirm password field', () => {\n    render(<MemoryRouter><Signup /></MemoryRouter>);\n    const confirmInput = screen.getByLabelText('Confirm Password');\n    fireEvent.change(confirmInput, { target: { value: ' ' } });\n    expect(confirmInput.value).toBe(' ');\n    });\n\n// Verify handler function responds to a click of the signup button\nit('should respond to a click of the signup button', () => {\n    render(<MemoryRouter><Signup /></MemoryRouter>);\n    const signupButton = screen.getByTestId('signup button');\n    fireEvent.click(signupButton);\n    });\n\n// Verify if null entry displays an error message\nit('should display an error message if email is null', async () => {\n    const mockSignInWithEmailAndPassword = jest.fn(() => {\n        throw new Error('auth/invalid-email');\n    });\n    jest.mock('../firebase/Firebase', () => ({\n        signInWithEmailAndPassword: mockSignInWithEmailAndPassword,\n    }));\n\n    render(<MemoryRouter><Signup /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    const passwordInput = screen.getByLabelText('Password');\n    const confirmInput = screen.getByLabelText('Confirm Password');\n    const signupButton = screen.getByTestId('signup button');\n    \n    fireEvent.change(emailInput, { target: { value: ' ' } });\n    fireEvent.change(passwordInput, { target: { value: 'test123' } });\n    fireEvent.change(confirmInput, { target: { value: 'test123' } });\n    fireEvent.click(signupButton);\n    \n    const errorMessage = await screen.findByText('Firebase: Error (auth/missing-email).');\n    expect(errorMessage).toBeInTheDocument();\n    });\n\n// Verify if invalid password displays an error message\n  it('should display an error message if passwords do not match', async () => {\n    const mockSignInWithEmailAndPassword = jest.fn(() => {\n      throw new Error('auth/wrong-password');\n    });\n    jest.mock('../firebase/Firebase', () => ({\n      signInWithEmailAndPassword: mockSignInWithEmailAndPassword,\n    }));\n\n    render( <MemoryRouter><Signup /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    const passwordInput = screen.getByLabelText('Password');\n    const confirmInput = screen.getByLabelText('Confirm Password');\n    const signupButton = screen.getByTestId('signup button');\n\n    fireEvent.change(emailInput, { target: { value: 'bee@b.com' } });\n    fireEvent.change(passwordInput, { target: { value: 'te1vwsedv23' } });\n    fireEvent.change(confirmInput, { target: { value: 'te1vwdv23' } }); // wrong password\n    fireEvent.click(signupButton);\n\n    const errorMessage = await screen.findByText('Passwords do not match');\n    expect(errorMessage).toBeInTheDocument();\n  });\n\n// Verify if navbar options are displayed after successful signup\n  it('should display navbar options after successful signup', async () => {\n    const mockUser = {\n      uid: '1234',\n      displayName: 'testuser',\n      email: 'tea@email.com'\n    };\n    const mockOnAuthStateChanged = jest.fn((callback) => {\n      callback(mockUser);\n    });\n    jest.spyOn(auth, 'onAuthStateChanged').mockImplementation(mockOnAuthStateChanged);\n\n    render( <MemoryRouter><Signup /></MemoryRouter>);\n    const emailInput = screen.getByLabelText('Email address');\n    const passwordInput = screen.getByLabelText('Password');\n    const confirmInput = screen.getByLabelText('Confirm Password');\n    const signupButton = screen.getByTestId('signup button');\n\n    fireEvent.change(emailInput, { target: { value: 'tea@email.com' } });\n    fireEvent.change(passwordInput, { target: { value: 'test123' } });\n    fireEvent.change(confirmInput, { target: { value: 'test123' } });\n    fireEvent.click(signupButton);\n\n    await waitFor(() => {\n      expect(screen.getByText('Logout')).toBeInTheDocument();\n      expect(screen.getByText('Profile')).toBeInTheDocument();\n      expect(screen.getByText('Map')).toBeInTheDocument();\n      expect(screen.getByText('Directions')).toBeInTheDocument();\n      expect(screen.getByText('Create Route')).toBeInTheDocument();\n      expect(screen.getByText('Saved Routes')).toBeInTheDocument();\n    });\n  });\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("b",null,"Signup.js Test Results"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'<testsuite name="Signup" errors="0" failures="0" skipped="0" timestamp="2023-04-22T21:22:51" time="2.554" tests="12">\n    <testcase classname="Signup should render the Signup form" name="Signup should render the Signup form" time="0.128">\n    </testcase>\n    <testcase classname="Signup should display Email Field" name="Signup should display Email Field" time="0.018">\n    </testcase>\n    <testcase classname="Signup should display Password Field" name="Signup should display Password Field" time="0.014">\n    </testcase>\n    <testcase classname="Signup should display Confirm Password Field" name="Signup should display Confirm Password Field" time="0.019">\n    </testcase>\n    <testcase classname="Signup should display Signup Button" name="Signup should display Signup Button" time="0.01">\n    </testcase>\n    <testcase classname="Signup should respond to a change of event in the email field" name="Signup should respond to a change of event in the email field" time="0.01">\n    </testcase>\n    <testcase classname="Signup should respond to a change of event in the password field" name="Signup should respond to a change of event in the password field" time="0.019">\n    </testcase>\n    <testcase classname="Signup should respond to a change of event in the confirm password field" name="Signup should respond to a change of event in the confirm password field" time="0.018">\n    </testcase>\n    <testcase classname="Signup should respond to a click of the signup button" name="Signup should respond to a click of the signup button" time="0.075">\n    </testcase>\n    <testcase classname="Signup should display an error message if email is null" name="Signup should display an error message if email is null" time="0.237">\n    </testcase>\n    <testcase classname="Signup should display an error message if passwords do not match" name="Signup should display an error message if passwords do not match" time="0.03">\n    </testcase>\n    <testcase classname="Signup should display navbar options after successful signup" name="Signup should display navbar options after successful signup" time="0.042">\n    </testcase>\n</testsuite>\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("b",null,"Navbar.js"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"testNavbarLogo()\n    - Test: Verify OptiMapLogo displays on navbar\n    - Result: Pass if image displays correctly\n")),(0,o.kt)("h2",{id:"back-end"},"Back-end"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("b",null,"DataBase.js"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"testRouteRetrieval()\n    - Test: Verify retrieval of routes \n    - Result: Pass is user routes are retrieved correctly\n\ntestSaveRoute()        \n    - Test: Verify routes are saved \n    - Result: Pass if routes are saved correctly\n\ntestInvalidRoute() \n    - Test: Verify an invalid route cannot be saved \n    - Result: Pass if invalid route cannot be saved successfully\n\ntestUserInformation()\n    - Test: Verify user information is saved to firebase\n    - Result: Pass if user inforation is correctly saved to firebase\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("b",null,"MapApi.js"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"testAddress()\n    - Test: Verify entering an address retrieve coordinate\n    - Result: Pass if entering an address retrieves the correct coordinate\n\ntestInvalidAddress()\n    - Test: Verify api request with invalid information returns error\n    - Result: Pass if an invalid request correctly returns error\n\ntestGeolocation()\n    - Test: Verify api request for geolocation return coordinate\n    - Result: Pass if api request for geolocation returns correct coordinate\n\ntestTransportationMode()\n    - Test: Verify change of tranportation \n    - Result: Pass if change of tranportation correctly changes the route direction based on mode\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("b",null,"Algorithm.js"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"testTimeOptimization()\n    - Test: Verify route calculation optimizes route based on time\n    - Result: Pass if route is correctly optimized based on time\n\ntestDistanceOptimization()\n    - Test: Verify route calculation optimizes route based on distance\n    - Result: Pass if route is correctly optimized based on distance\n")))}d.isMDXComponent=!0}}]);